var fs = require('fs');
var path = require('path');

var OS_Regexps = {};

// Check for /src/aura/Component/ComponentController.js or /src/aura/Component/ComponentHelper.js pattern
var buidRegexp = function buidRegexp(sep) {
  var separator = '\\' + sep;
  return new RegExp('src' + separator + 'aura' + separator + '[^' + separator + ']+' + separator + '.+(Controller|Helper|Renderer).js$');
};
var isAuraFile = function isAuraFile(filename) {
  var sep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : path.sep;

  var auraRegex = OS_Regexps[sep];
  if (!auraRegex) {
    auraRegex = OS_Regexps[sep] = buidRegexp(sep);
  }
  return auraRegex.test(filename);
};

// Add module.exports for every aura file
var auraCodeTransformer = function auraCodeTransformer(code) {
  return 'module.exports=' + code;
};

function hookIstanbul(_istanbul) {
  // This method relies on a --post-require-hook mocha-aura parameter for istanbul cover
  var originalHookRequire = _istanbul.hook.hookRequire;

  _istanbul.hook.hookRequire = function (matcher, transformer, options) {
    function transformerWrapper(code, filename) {
      return transformer(isAuraFile(filename) ? auraCodeTransformer(code) : code, filename);
    }
    return originalHookRequire(matcher, transformerWrapper, options);
  };
}

function hookRequire(_Module) {
  var originalJsExtension = _Module._extensions['.js'];

  _Module._extensions['.js'] = function (module, filename) {

    if (!isAuraFile(filename)) {
      return originalJsExtension(module, filename);
    }

    var code = auraCodeTransformer(fs.readFileSync(filename, 'utf8'), filename);
    module._compile(code, filename);
  };
}

var runUnderIstanbul = function runUnderIstanbul(_cache) {
  return Object.keys(_cache).some(function (key) {
    return key.indexOf('node_modules/istanbul') !== -1;
  });
};

var Module = require('module');
if (runUnderIstanbul(require.cache)) {
  var istanbul = require('istanbul');
  hookIstanbul(istanbul);
} else {
  hookRequire(Module);
}

// Conform to post-require-hook for istanbul
module.exports = function () {
  return null;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uL2hvb2tzL2hvb2tzLmpzIiwiLi4vaG9va3MvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcblxubGV0IE9TX1JlZ2V4cHMgPSB7fVxuXG4vLyBDaGVjayBmb3IgL3NyYy9hdXJhL0NvbXBvbmVudC9Db21wb25lbnRDb250cm9sbGVyLmpzIG9yIC9zcmMvYXVyYS9Db21wb25lbnQvQ29tcG9uZW50SGVscGVyLmpzIHBhdHRlcm5cbmNvbnN0IGJ1aWRSZWdleHAgPSBzZXAgPT4ge1xuICBjb25zdCBzZXBhcmF0b3IgPSAnXFxcXCcgKyBzZXA7XG4gIHJldHVybiBuZXcgUmVnRXhwKGBzcmMke3NlcGFyYXRvcn1hdXJhJHtzZXBhcmF0b3J9W14ke3NlcGFyYXRvcn1dKyR7c2VwYXJhdG9yfS4rKENvbnRyb2xsZXJ8SGVscGVyfFJlbmRlcmVyKS5qcyRgKVxufVxuZXhwb3J0IGNvbnN0IGlzQXVyYUZpbGUgPSAoZmlsZW5hbWUsIHNlcCA9IHBhdGguc2VwKSA9PiB7XG4gIGxldCBhdXJhUmVnZXggPSBPU19SZWdleHBzW3NlcF1cbiAgaWYgKCFhdXJhUmVnZXgpIHtcbiAgICBhdXJhUmVnZXggPSBPU19SZWdleHBzW3NlcF0gPSBidWlkUmVnZXhwKHNlcCk7XG4gIH1cbiAgcmV0dXJuIGF1cmFSZWdleC50ZXN0KGZpbGVuYW1lKTtcbn1cblxuLy8gQWRkIG1vZHVsZS5leHBvcnRzIGZvciBldmVyeSBhdXJhIGZpbGVcbmV4cG9ydCBjb25zdCBhdXJhQ29kZVRyYW5zZm9ybWVyID0gKGNvZGUpID0+IHtcbiAgcmV0dXJuICdtb2R1bGUuZXhwb3J0cz0nICsgY29kZTtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gaG9va0lzdGFuYnVsKF9pc3RhbmJ1bCkge1xuICAvLyBUaGlzIG1ldGhvZCByZWxpZXMgb24gYSAtLXBvc3QtcmVxdWlyZS1ob29rIG1vY2hhLWF1cmEgcGFyYW1ldGVyIGZvciBpc3RhbmJ1bCBjb3ZlclxuICB2YXIgb3JpZ2luYWxIb29rUmVxdWlyZSA9IF9pc3RhbmJ1bC5ob29rLmhvb2tSZXF1aXJlO1xuXG4gIF9pc3RhbmJ1bC5ob29rLmhvb2tSZXF1aXJlID0gZnVuY3Rpb24obWF0Y2hlciwgdHJhbnNmb3JtZXIsIG9wdGlvbnMpIHtcbiAgICBmdW5jdGlvbiB0cmFuc2Zvcm1lcldyYXBwZXIoY29kZSwgZmlsZW5hbWUpIHtcbiAgICAgIHJldHVybiB0cmFuc2Zvcm1lcihpc0F1cmFGaWxlKGZpbGVuYW1lKSA/ICBhdXJhQ29kZVRyYW5zZm9ybWVyKGNvZGUpIDogY29kZSwgZmlsZW5hbWUpO1xuICAgIH1cbiAgICByZXR1cm4gb3JpZ2luYWxIb29rUmVxdWlyZShtYXRjaGVyLCB0cmFuc2Zvcm1lcldyYXBwZXIsIG9wdGlvbnMpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBob29rUmVxdWlyZShfTW9kdWxlKSB7XG4gIGNvbnN0IG9yaWdpbmFsSnNFeHRlbnNpb24gPSBfTW9kdWxlLl9leHRlbnNpb25zWycuanMnXTtcblxuICBfTW9kdWxlLl9leHRlbnNpb25zWycuanMnXSA9IGZ1bmN0aW9uIChtb2R1bGUsIGZpbGVuYW1lKSB7XG4gICAgICBcbiAgICAgIGlmICghaXNBdXJhRmlsZShmaWxlbmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsSnNFeHRlbnNpb24obW9kdWxlLCBmaWxlbmFtZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBjb2RlID0gYXVyYUNvZGVUcmFuc2Zvcm1lcihmcy5yZWFkRmlsZVN5bmMoZmlsZW5hbWUsICd1dGY4JyksIGZpbGVuYW1lKTtcbiAgICAgIG1vZHVsZS5fY29tcGlsZShjb2RlLCBmaWxlbmFtZSk7XG4gIH07XG59XG5cbmV4cG9ydCBjb25zdCBydW5VbmRlcklzdGFuYnVsID0gKF9jYWNoZSkgPT4gT2JqZWN0LmtleXMoX2NhY2hlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAuc29tZSgoa2V5KSA9PiBrZXkuaW5kZXhPZignbm9kZV9tb2R1bGVzL2lzdGFuYnVsJykgIT09IC0xKTtcblxuXG5cbiIsImNvbnN0IE1vZHVsZSA9IHJlcXVpcmUoJ21vZHVsZScpO1xuaW1wb3J0IHsgaG9va0lzdGFuYnVsLCBob29rUmVxdWlyZSwgcnVuVW5kZXJJc3RhbmJ1bCB9IGZyb20gJy4vaG9va3MnO1xuXG5pZiAocnVuVW5kZXJJc3RhbmJ1bChyZXF1aXJlLmNhY2hlKSkge1xuICBjb25zdCBpc3RhbmJ1bCA9IHJlcXVpcmUoJ2lzdGFuYnVsJyk7ICBcbiAgaG9va0lzdGFuYnVsKGlzdGFuYnVsKTtcbn0gZWxzZSB7XG4gIGhvb2tSZXF1aXJlKE1vZHVsZSk7XG59XG5cbi8vIENvbmZvcm0gdG8gcG9zdC1yZXF1aXJlLWhvb2sgZm9yIGlzdGFuYnVsXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbnVsbDtcbn0iXSwibmFtZXMiOlsiZnMiLCJyZXF1aXJlIiwicGF0aCIsIk9TX1JlZ2V4cHMiLCJidWlkUmVnZXhwIiwic2VwYXJhdG9yIiwic2VwIiwiUmVnRXhwIiwiaXNBdXJhRmlsZSIsImZpbGVuYW1lIiwiYXVyYVJlZ2V4IiwidGVzdCIsImF1cmFDb2RlVHJhbnNmb3JtZXIiLCJjb2RlIiwiaG9va0lzdGFuYnVsIiwiX2lzdGFuYnVsIiwib3JpZ2luYWxIb29rUmVxdWlyZSIsImhvb2siLCJob29rUmVxdWlyZSIsIm1hdGNoZXIiLCJ0cmFuc2Zvcm1lciIsIm9wdGlvbnMiLCJ0cmFuc2Zvcm1lcldyYXBwZXIiLCJfTW9kdWxlIiwib3JpZ2luYWxKc0V4dGVuc2lvbiIsIl9leHRlbnNpb25zIiwibW9kdWxlIiwicmVhZEZpbGVTeW5jIiwiX2NvbXBpbGUiLCJydW5VbmRlcklzdGFuYnVsIiwiX2NhY2hlIiwiT2JqZWN0Iiwia2V5cyIsInNvbWUiLCJrZXkiLCJpbmRleE9mIiwiTW9kdWxlIiwiY2FjaGUiLCJpc3Rh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
